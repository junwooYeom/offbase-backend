name: Deploy to Supabase

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      has-migrations: ${{ steps.check.outputs.has-migrations }}
      migration-count: ${{ steps.check.outputs.migration-count }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check migrations
        id: check
        run: |
          echo "üîç Checking for migration files..."
          
          if [ ! -d "supabase/migrations" ]; then
            echo "‚ùå No migrations directory found"
            echo "has-migrations=false" >> $GITHUB_OUTPUT
            echo "migration-count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Count actual SQL files (ignore .gitkeep)
          SQL_COUNT=$(find supabase/migrations -name "*.sql" -type f | wc -l)
          
          if [ $SQL_COUNT -gt 0 ]; then
            echo "‚úÖ Found $SQL_COUNT migration files"
            echo "has-migrations=true" >> $GITHUB_OUTPUT
            echo "migration-count=$SQL_COUNT" >> $GITHUB_OUTPUT
            ls -la supabase/migrations/*.sql
          else
            echo "‚ö†Ô∏è No SQL migration files found"
            echo "has-migrations=false" >> $GITHUB_OUTPUT
            echo "migration-count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate SQL syntax
        if: steps.check.outputs.has-migrations == 'true'
        run: |
          echo "üîç Validating SQL files..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking: $(basename $file)"
              
              # Basic validation
              if [ ! -s "$file" ]; then
                echo "‚ùå ERROR: $file is empty!"
                exit 1
              fi
              
              # Warn about dangerous operations
              if grep -iE "(drop|truncate)\s+(table|database|schema)" "$file"; then
                echo "‚ö†Ô∏è  WARNING: $file contains potentially dangerous operations"
              fi
              
              # Check for common issues
              if ! grep -q ";" "$file"; then
                echo "‚ö†Ô∏è  WARNING: $file might be missing semicolons"
              fi
            fi
          done
          echo "‚úÖ Validation complete"

  deploy-staging:
    needs: validate
    if: |
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging') &&
      needs.validate.outputs.has-migrations == 'true' &&
      github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to Staging Environment"
          echo "üìä Deploying ${{ needs.validate.outputs.migration-count }} migrations"
          echo "üîó Project: dijtowiohxvwdnvgprud"
          
          # Link to project (skip password prompt)
          echo "" | supabase link --project-ref ${{ secrets.STAGING_PROJECT_REF }}
          
          # Show what will change
          echo ""
          echo "üìã Database changes:"
          supabase db diff || echo "Unable to generate diff"
          
          # Deploy using database URL (more reliable than password)
          echo ""
          echo "üöÄ Applying migrations..."
          supabase db push --db-url "${{ secrets.STAGING_DATABASE_URL }}"
          
          echo ""
          echo "‚úÖ Staging deployment complete!"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  deploy-production:
    needs: validate
    if: |
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production') &&
      needs.validate.outputs.has-migrations == 'true' &&
      github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Create backup directory
        run: mkdir -p backups
      
      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to Production Environment"
          echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT"
          echo "üìä Deploying ${{ needs.validate.outputs.migration-count }} migrations"
          echo "üîó Project: zutbqmhxvdgvcllobtxo"
          
          # Link to project (skip password prompt)
          echo "" | supabase link --project-ref ${{ secrets.PRODUCTION_PROJECT_REF }}
          
          # Try to create a backup (optional, don't fail if it doesn't work)
          echo ""
          echo "üì∏ Attempting to backup current schema..."
          supabase db pull --db-url "${{ secrets.PRODUCTION_DATABASE_URL }}" > backups/pre-deploy-$(date +%Y%m%d-%H%M%S).sql || echo "Backup creation skipped"
          
          # Show what will change
          echo ""
          echo "üìã Database changes:"
          supabase db diff || echo "Unable to generate diff"
          
          # Deploy using database URL
          echo ""
          echo "üöÄ Applying migrations..."
          supabase db push --db-url "${{ secrets.PRODUCTION_DATABASE_URL }}"
          
          echo ""
          echo "‚úÖ Production deployment complete!"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Upload backup artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-backup-${{ github.run_id }}
          path: backups/
          retention-days: 30
          if-no-files-found: ignore

  migration-instructions:
    needs: validate
    if: needs.validate.outputs.has-migrations == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Provide instructions
        run: |
          echo "‚ùå No migration files found!"
          echo ""
          echo "üìö To create migrations:"
          echo ""
          echo "1. Install Supabase CLI:"
          echo "   brew install supabase/tap/supabase"
          echo ""
          echo "2. Get your access token:"
          echo "   https://app.supabase.com/account/tokens"
          echo ""
          echo "3. Pull schema from staging:"
          echo "   export SUPABASE_ACCESS_TOKEN=your-token"
          echo "   supabase link --project-ref dijtowiohxvwdnvgprud"
          echo "   supabase db pull --db-url 'your-staging-database-url'"
          echo ""
          echo "4. Commit and push:"
          echo "   git add supabase/migrations/"
          echo "   git commit -m 'Add database migrations'"
          echo "   git push"
          echo ""
          echo "üìñ See detailed instructions in:"
          echo "   - QUICK_FIX.md"
          echo "   - FIX_PASSWORD_ISSUE.md"
          exit 1

  summary:
    needs: [validate, deploy-staging, deploy-production]
    if: always() && needs.validate.outputs.has-migrations == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Deployment summary
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo ""
          echo "Migrations found: ${{ needs.validate.outputs.migration-count }}"
          echo ""
          
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging: Deployed successfully"
          elif [ "${{ needs.deploy-staging.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è  Staging: Skipped"
          else
            echo "‚ùå Staging: Failed or not run"
          fi
          
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production: Deployed successfully"
          elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è  Production: Skipped"
          else
            echo "‚ùå Production: Failed or not run"
          fi