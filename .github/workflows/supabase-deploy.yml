name: Deploy to Supabase

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  check-migrations:
    runs-on: ubuntu-latest
    outputs:
      has-migrations: ${{ steps.check.outputs.has-migrations }}
      migration-count: ${{ steps.check.outputs.migration-count }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for migrations
        id: check
        run: |
          if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations)" ]; then
            echo "has-migrations=true" >> $GITHUB_OUTPUT
            echo "migration-count=$(ls -1 supabase/migrations/*.sql 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
            echo "‚úÖ Found $(ls -1 supabase/migrations/*.sql 2>/dev/null | wc -l) migration files"
            ls -la supabase/migrations/
          else
            echo "has-migrations=false" >> $GITHUB_OUTPUT
            echo "migration-count=0" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No migration files found!"
          fi

  validate-migrations:
    needs: check-migrations
    if: needs.check-migrations.outputs.has-migrations == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate SQL syntax
        run: |
          echo "üîç Validating SQL syntax in migration files..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking: $file"
              # Basic SQL validation (check for common issues)
              if ! grep -q ";" "$file"; then
                echo "‚ö†Ô∏è Warning: $file might be missing semicolons"
              fi
              if grep -i "drop table\|drop schema\|drop database" "$file"; then
                echo "‚ö†Ô∏è Warning: $file contains DROP statements"
              fi
            fi
          done

  deploy-staging:
    needs: [check-migrations, validate-migrations]
    if: |
      github.ref == 'refs/heads/develop' && 
      needs.check-migrations.outputs.has-migrations == 'true'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to Staging Environment"
          echo "üìä Deploying ${{ needs.check-migrations.outputs.migration-count }} migrations"
          
          # Link to staging
          supabase link --project-ref ${{ secrets.STAGING_PROJECT_REF }} --password "${{ secrets.STAGING_DB_PASSWORD }}"
          
          # Show what will be changed
          echo "üìã Changes to be applied:"
          supabase db diff || true
          
          # Push migrations
          supabase db push
          
          echo "‚úÖ Staging deployment complete!"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  deploy-production:
    needs: [check-migrations, validate-migrations]
    if: |
      github.ref == 'refs/heads/main' && 
      needs.check-migrations.outputs.has-migrations == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Backup Production Schema
        run: |
          echo "üì∏ Creating backup of production schema..."
          mkdir -p backups
          
          # Link to production
          supabase link --project-ref ${{ secrets.PRODUCTION_PROJECT_REF }} --password "${{ secrets.PRODUCTION_DB_PASSWORD }}"
          
          # Pull current schema as backup
          supabase db pull --schema public > backups/production-backup-$(date +%Y%m%d-%H%M%S).sql || true
          
          echo "‚úÖ Backup created"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to Production Environment"
          echo "‚ö†Ô∏è  Production deployment - Project: zutbqmhxvdgvcllobtxo"
          echo "üìä Deploying ${{ needs.check-migrations.outputs.migration-count }} migrations"
          
          # Show what will be changed
          echo "üìã Changes to be applied:"
          supabase db diff || true
          
          # Confirmation step (in real scenario, this would be manual approval)
          echo "üö¶ Proceeding with production deployment..."
          
          # Push migrations
          supabase db push
          
          echo "‚úÖ Production deployment complete!"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Upload Backup
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-backup
          path: backups/
          retention-days: 30

  notify-no-migrations:
    needs: check-migrations
    if: needs.check-migrations.outputs.has-migrations == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify about missing migrations
        run: |
          echo "‚ùå No migration files found in supabase/migrations/"
          echo ""
          echo "To create migrations:"
          echo "1. Pull from existing database: supabase db pull"
          echo "2. Create new migration: supabase migration new <name>"
          echo "3. Add SQL to the migration file"
          echo "4. Commit and push"
          exit 1